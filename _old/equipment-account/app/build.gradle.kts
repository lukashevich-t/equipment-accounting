/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */
import java.nio.file.Paths

plugins {
    id("war")
    id("org.jetbrains.kotlin.jvm") version Versions.KOTLIN
}

group = "by.gto.equipment"
version = "3.1.0"
val targetWARName = "equipment-account.war"
val frontendDir = "$projectDir/src/main/front"
val authByPass = ("PASS" == System.getenv("authType"))

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://mvnrepository.com")
    }
    maven {
        url = uri("https://repository.jboss.org/nexus/content/repositories/releases")
    }
    maven {
        url = uri("https://repository.jboss.org/nexus/content/repositories/thirdparty-releases")
    }
    maven {
        url = uri("sftp://git.gto.by:22005/var/mvnroot/")
        credentials {
            username = System.getProperty("mvn.deploy.username")
            // systemProp.mvn.deploy.username=name in c:\Users\<user>\.gradle\gradle.properties
            password = System.getProperty("mvn.deploy.password")
        }
    }
}

dependencies {
    providedCompile("org.jboss.resteasy:resteasy-jaxrs:${Versions.RESTEASY}")
    providedCompile("org.jboss.resteasy:resteasy-jackson2-provider:${Versions.RESTEASY}")
    providedCompile("commons-io:commons-io:${Versions.COMMONS_IO}")
    providedCompile("org.apache.commons:commons-lang3:${Versions.COMMONS_LANG3}")

    providedCompile(group = "javax", name = "javaee-api", version = Versions.JAVAEE)
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${Versions.KOTLIN}")
    implementation("com.google.zxing:core:3.3.3")
    implementation("net.sf.jasperreports:jasperreports:${Versions.JASPERREPORTS}") {
        exclude(group = "aopalliance", module = "aopalliance")
        exclude(group = "org.bouncycastle", module = "bcmail-jdk14")
        exclude(group = "org.bouncycastle", module = "bcprov-jdk14")
        exclude(group = "org.bouncycastle", module = "bctsp-jdk14")
        exclude(group = "org.codehaus.castor", module = "castor-core")
        exclude(group = "org.codehaus.castor", module = "castor-xml")
        exclude(group = "commons-beanutils", module = "commons-beanutils")
        exclude(group = "com.google.zxing", module = "core")
        exclude(group = "org.eclipse.jdt.core.compiler", module = "ecj")
        exclude(group = "com.fasterxml.jackson.core", module = "jackson-annotations")
        exclude(group = "com.fasterxml.jackson.core", module = "jackson-core")
        exclude(group = "com.fasterxml.jackson.core", module = "jackson-databind")
        exclude(group = "jakarta-regexp", module = "jakarta-regexp")
        exclude(group = "org.jfree", module = "jcommon")
        exclude(group = "org.jfree", module = "jfreechart")
        exclude(group = "org.apache.lucene", module = "lucene-analyzers-common")
        exclude(group = "org.apache.lucene", module = "lucene-core")
        exclude(group = "org.apache.lucene", module = "lucene-queries")
        exclude(group = "org.apache.lucene", module = "lucene-queryparser")
        exclude(group = "org.olap4j", module = "olap4j")
        exclude(group = "xml-apis", module = "xml-apis")
        exclude(group = "com.lowagie", module = "itext")
    }
    // Это вместо модифицированного com.lowagie:itext:2.1.7js8, который хостился на jfrog.io, который в 2022 году закроется:
    // см. https://github.com/TIBCOSoftware/jasperreports/issues/148#issuecomment-700888163
    implementation("com.lowagie:itext:2.1.7") {
        exclude(group = "bouncycastle", module = "bcmail-jdk14")
        exclude(group = "bouncycastle", module = "bcprov-jdk14")
        exclude(group = "bouncycastle", module = "bctsp-jdk14")
    }
    providedCompile("org.slf4j:slf4j-api:${Versions.SLF4J}")
    implementation("commons-dbutils:commons-dbutils:1.7")
    api("org.slf4j:slf4j-log4j12:${Versions.SLF4J}")
}

task<Exec>("prepareWebpack") {
    description = "Prepares frontend build (resolves depenencies for webpack)"
    group = "Build"
    workingDir(frontendDir)
    commandLine("yarn.cmd")
}

task<Exec>("webpack") {
    description = "Builds frontend"
    group = "Build"
    val prepareWebpack = tasks.named("prepareWebpack", Exec::class.java).get()
    dependsOn(prepareWebpack)
    workingDir(frontendDir)
    commandLine("quasar.cmd", "build")
    outputs.dir("$buildDir/front")
//    inputs.dir("$frontendDir/public")
    inputs.dir("$frontendDir/src")
    inputs.file("$frontendDir/.postcssrc.js")
    inputs.file("$frontendDir/babel.config.js")
    inputs.file("$frontendDir/quasar.conf.js")
    inputs.file("$frontendDir/package.json")
}

task<Copy>("copyForSubstitution") {
    val targetPath = "$buildDir/auxWebInf/"
    inputs.property("authByPass", authByPass)
    into(targetPath)
    from("${project.war.webAppDirName}/WEB-INF/")
    // список файлов для подмены.
    val substitutions = mapOf(
        "/web.pass.xml" to Pair("/web.xml", true),
        "/web.xml" to Pair("/web.xml", false),
        "/web.cert.xml" to null,
        "/jboss-web.pass.xml" to Pair("/jboss-web.xml", true),
        "/jboss-web.xml" to Pair("/jboss-web.xml", false),
        "/jboss-web.cert.xml" to null,
    )
    eachFile {
        val path = this.file.path.replace('\\', '/')
        for ((k, v) in substitutions) {
            if (!path.endsWith(k, true)) continue
            this.exclude()
            if (v != null && v.second == authByPass) {
                this.copyTo(file(targetPath + v.first))
            }
        }
    }
}

tasks.war {
    archiveFileName.set(targetWARName)
    val webpack = tasks.named("webpack", Exec::class.java).get()
    val copyForSubstitution = tasks.named("copyForSubstitution", Copy::class.java).get()
    dependsOn(webpack, copyForSubstitution)
    inputs.property("version", project.version)
    inputs.property("buildNumber", buildNumber)
    webInf { from(copyForSubstitution.outputs) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    eachFile {
        val path = this.path.replace('\\', '/')
        if(path.startsWith("WEB-INF/", true)) {
            this.exclude()
        }
    }

    from(webpack.outputs.files)
    doFirst {
        manifest {
            attributes(
                mapOf(
                    "Created-By" to "Gradle",
                    "Implementation-Title" to "Gradle",
                    "Build-Jdk-Spec" to JavaVersion.current(),
                    "Implementation-Version" to "${archiveVersion}.$buildNumber"
                )
            )
        }
    }
}